from pytube import exceptions, YouTube
from aiogram import types

from loader import dp
from misc.download_files import Video


def check_user_link(link: str):
    try:
        YouTube(link)
        return True
    except exceptions.RegexMatchError:
        return False


@dp.message_handler(lambda message: check_user_link(message.text))
async def download_files(message: types.Message):
    await message.delete()
    video = Video(message.text)
    await message.answer(f'–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤—ñ–¥–µ–æ:\n–ù–∞–∑–≤–∞: <b>{video.name}</b>\n–ê–≤—Ç–æ—Ä: <b>{video.autor}</b>')
    await download_audio(message, video)


async def download_audio(message: types.Message, video: Video):
    try:
        await message.answer("<b>–ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –†–û–ó–ü–û–ß–ê–õ–û–°–¨</b> ‚ñ∂Ô∏è\n–ë—É–¥—å –ª–∞—Å–∫–∞, —Ç—Ä—ñ—à–∫–∏ –∑–∞—á–µ–∫–∞–π—Ç–µ üòò")
        video.download_audio()
        await message.answer('<b>–ì–û–¢–û–í–û</b> ‚úÖ')
        await message.answer('<b>–ù–ê–î–°–ò–õ–ê–Æ</b> ‚úâÔ∏è')
        await message.answer_audio(open(f'{video.name}.mp3', 'rb'), performer=video.autor,
                                   duration=video.length, title=video.name)
    except Exception as ex:
        print(ex)
        await message.answer("–í–∏–±–∞—á—Ç–µ, –≤–∏–Ω–∏–∫–ª–∞ –ø–æ—Ö–∏–±–∫–∞ —É —Ä–æ–±–æ—Ç—ñ –ø—Ä–æ–≥—Ä–∞–º–∏.\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑")
    finally:
        video.delete_audio()
